<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
		<title>XYZ Maps Example: Changes History </title>
	   	<script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_EDITOR_PATH}" type="text/javascript" charset="UTF-8" ></script>

		<style type="text/css">
			#map {
				position: absolute;
            	overflow: hidden;
				top: 0;
				left: 0;
				width: 100%;
                height: 100%;
			}
		</style>
	</head>
	<body>
		<div id="map"></div>
		<pre><div id="info"></div></pre>
		<a id="add" class="button">Add POI</a>
		<a id="undo" class="button">Undo</a>
		<a id="redo" class="button">Redo</a>
		<a id="revert" class="button">Revert</a>

		<script type="application/javascript">
	      	var YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;

			// Define customized Provider that extends from SpaceProvider
			class MyProvider extends here.xyz.maps.providers.SpaceProvider {

				// detect feature class by "featureClass" in feature's properties
				detectFeatureClass(feature) {
					return feature.properties.featureClass;
				}

				// read routing point value from Address or Place property
				// implementing this function is necessary only if there were Address or Place in Space
				readRoutingPosition(feature) {
					return feature.prop('routingPoint');
				}

				// read id of routing link from Address or Place property
				// implementing this function is necessary only if there were Address or Place in Space
				readRoutingLink(feature) {
					return feature.prop('routingLink');
				}

				// write routing point to Address or Place
				// implementing this function is necessary only if there were Address or Place in Space
				writeRoutingPosition(feature, position) {
					feature.prop('routingPoint', position);
				}

				// write id of routing link to Address or Place
				// implementing this function is necessary only if there were Address or Place in Space
				writeRoutingLink(feature, link) {
					feature.prop('routingLink', link ? link.id : link);
				}

			// read turn restriction value from Link property
			// implementing this function is necessary only if there was Link in Space
			readTurnRestriction(from, to) {
				let turn = from.link.prop('turnRestriction') || {};
				// first shape point is 'start' and the last one is 'end'
				let restrictions = turn[from.index ? 'end' : 'start'] || [];

				// check if the id of to-link is already restricted
				return restrictions.indexOf(to.link.id) >= 0;
			};

			// edit turn restriction value on Link
			// implementing this function is necessary only if there was Link in Space
			writeTurnRestriction(restricted, from, to) {
				let turn = from.link.prop('turnRestriction') || {};
				let node = from.index ? 'end' : 'start';
				let restrictions = turn[node] = turn[node] || [];
				let index = restrictions.indexOf(to.link.id);

				if (restricted) {
					if (index == -1) {
						// add id of to-link to restrictions array
						restrictions.push(to.link.id);
					}
				} else if (index >= 0) {
					// remove the id out of restrictions array if the link was restricted
					restrictions.splice(index, 1);
				}

				// set turnRestriction to from-link
				from.link.prop('turnRestriction', turn);
			}

				// read if the Link is pedestrian only
				// implementing this function is necessary only if there was Link in Space
				readPedestrianOnly(feature) {
					return Boolean(feature.prop('pedestrianOnly'));
				}

				// read the direction value on Link, expected values are: 'BOTH', 'START_TO_END' or 'END_TO_START'
				// implementing this function is necessary only if there was Link in Space
				readDirection(feature) {
					return feature.prop('direction') || 'BOTH';
				}

				// Address or Place connects to a Link with its 'routingLink' and 'routingPoint' properties,
				// the connected Link could be either in the same space as the Address or Place is or in a different space,
				// this function returns id of provider which contains space of the connected Link
				readRoutingProvider(location, providers) {
					for (let provider of providers) {
            			// id of link provider should have keyword 'link'
						if (provider.id.toLowerCase().indexOf('link') >= 0) {
							return provider.id;
						}
					}
				}
			}

			var bgLayer = new here.xyz.maps.layers.MVTLayer({
				name: 'background layer',
				min: 1,
				max: 20,
				remote: {
					url: 'https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt?access_token='+YOUR_ACCESS_TOKEN
				}
			});
			var myLayer = new here.xyz.maps.layers.TileLayer({
				name: 'My Layer',
				min: 14,
				max: 20,
				// Customized provider to provide objects
				provider: new MyProvider({
					id: "linkProvider",
					space: "playground-link",
					credentials: {
						access_token: YOUR_ACCESS_TOKEN
					},
					level: 14
				})
			});


	        // setup the Map Display
			window.display = new  here.xyz.maps.Map( document.getElementById("map"), {
	                zoomLevel : 17,
					center : {longitude: -116.85755, latitude: 33.03607},

	                // add layers to display
	                layers: [bgLayer, myLayer]
	            });

			// setup the editEngine
	        var editor = new here.xyz.maps.editor.Editor( display );

			// add layer to editor, make it editable
			editor.addLayer( myLayer );


/*###visiblesource*/
var changesInfo = {
	"Current Step": 0,
	"Total Steps": 0,
	"Modified Features": 0
}
var info = document.querySelector("#info");
info.innerText = JSON.stringify(changesInfo, undefined, 4);

// Add observer to current history
editor.addObserver("history.current", function(ob, currentStep, lastStep){
	changesInfo["Current Step"] = editor.get("history.current");
	changesInfo["Total Steps"] = editor.get("history.length");
	changesInfo["Modified Features"] = editor.get("changes.length");

	info.innerText = JSON.stringify(changesInfo, undefined, 4);
})

document.querySelector("#add").onclick = function(){
	var width = display.getWidth();
	var height = display.getHeight();
	var point = new here.xyz.maps.editor.PixelCoordinate(width * Math.random() , height * Math.random());

	// add link to editor, set 'featureClass' to 'PLACE' which tells provider this is a place
	var poi = editor.addFeature( new here.xyz.maps.editor.features.Place(point), {featureClass: 'PLACE'} );
}

document.querySelector("#undo").onclick = function(){
	editor.undo();
}

document.querySelector("#redo").onclick = function(){
	editor.redo();
}

document.querySelector("#revert").onclick = function(){
	editor.revert();
}
/*visiblesource###*/
		</script>
	</body>
</html>
