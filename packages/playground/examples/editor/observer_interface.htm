<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
		<title>XYZ Maps Example:React to data changed </title>

	   	<script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_EDITOR_PATH}" type="text/javascript" charset="UTF-8" ></script>

		<style type="text/css">
			#map {
				position: absolute;
            	overflow: hidden;
				top: 0;
				left: 0;
				width: 100%;
                height: 100%;
			}
		</style>
	</head>
	<body>
		<div id="map"></div>

		<div id="info">Supported Observers: </div>
		<div id="zoomLevel">Current zoomlevel: 18</div>

		<script type="application/javascript">
		// specify credentials
      	var YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;

		// Define customized Provider that extends from SpaceProvider
		class MyProvider extends here.xyz.maps.providers.SpaceProvider {

			// Detect feature class by geometry type
			detectFeatureClass(feature) {
				return 'NAVLINK';
			}

			// Get routing point of the feature
			readRoutingPosition(feature) {
				return feature.prop('rp');
			}

			// Get id of the link to which the feature connects
			readRoutingLink(feature) {
				return feature.prop('link');
			}

			// Update routing point of the feature
			writeRoutingPosition(feature, position) {
				feature.prop('rp', position);
			}

			// Update id of the link to which the feature connects
			writeRoutingLink(feature, link) {
				feature.prop('link', link ? link.id : link);
			}

			// There is no turn restriction from link A to B
			readTurnRestriction(A, B) {
				return false;
			};

			// Do nothing for editing turn restriction
			writeTurnRestriction(restricted, A, B) {
			}

			// The feature is not pedestrian only
			readPedestrianOnly(feature) {
				return false
			}

			// The feature is two-way street, valid value: 'BOTH' | 'START_TO_END' | 'END_TO_START'
			readDirection(feature) {
				return 'BOTH';
			}

			// Get the id of the provider which have the links to which the points connect
			readRoutingProvider(location, providers) {
				// The single layer in editor has links in this example
				return providers[0].id;
			}
		}

		var layers = [
			new here.xyz.maps.layers.MVTLayer({
				name: 'background layer',
				min: 1,
				max: 20,
				remote: {
					url: 'https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt?access_token='+YOUR_ACCESS_TOKEN
				}
			}),
			new here.xyz.maps.layers.TileLayer({
				name: 'Link Layer',
		        min: 14,
		        max: 20,
				// Customized provider to provide objects
				provider: new MyProvider({
					name: "Objects",
					space: "playground-link",
					credentials: {
						access_token: YOUR_ACCESS_TOKEN
					},
					level: 14
				})
			})
		]
        // setup the Map Display
		window.display = new  here.xyz.maps.Map( document.getElementById("map"), {
                zoomLevel : 17,
                center: {
	         		latitude:37.76620, longitude:-122.159958
                },

                // add layers to display
                layers: layers
            });

		// setup the editEngine
        var editor = new here.xyz.maps.editor.Editor( display );

		// add link layer to editor, make layers editable
		editor.addLayer( layers[1] );

/*###visiblesource*/
/**
 * This example shows how to add observer to zoomLevel in editor.
 *
 * All supported observers are displayed in div, zoom the map, zoomlevel is updated in div.
 */

var allObserversTag = document.querySelector("#info");
var zoomlevelTag = document.querySelector("#zoomLevel");


// Add an observer to zoomLevel
// It shows the current zoomLevel
editor.addObserver('zoomLevel', function(prop, zln, zlo) {
	zoomlevelTag.innerText = "Current zoomlevel: " + zln+ ", last zoomlevel:" + zlo;
});
/*visiblesource###*/
		</script>
	</body>
</html>
